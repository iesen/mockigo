// Code generated by mockigo. DO NOT EDIT.

package filename

import match "github.com/iesen/mockigo/match"
import mock "github.com/iesen/mockigo/mock"

var _ = match.Any[int]

type IfaceWithBuildTagInFilename struct {
	mock *mock.Mock
}

func NewIfaceWithBuildTagInFilename(t mock.Testing) *IfaceWithBuildTagInFilename {
	t.Helper()
	return &IfaceWithBuildTagInFilename{mock: mock.NewMock(t)}
}

type _IfaceWithBuildTagInFilename_Expecter struct {
	mock *mock.Mock
}

func (_mock *IfaceWithBuildTagInFilename) EXPECT() _IfaceWithBuildTagInFilename_Expecter {
	return _IfaceWithBuildTagInFilename_Expecter{mock: _mock.mock}
}

type _IfaceWithBuildTagInFilename_Sprintf_Call struct {
	*mock.Call
}

func (_mock *IfaceWithBuildTagInFilename) Sprintf(format string, a ...interface{}) string {
	_mock.mock.T.Helper()
	_args := []interface{}{format}
	for _, _variadic := range a {
		_args = append(_args, interface{}(_variadic))
	}
	_results := _mock.mock.Called("Sprintf", _args...)
	_r0 := _results.Get(0).(string)
	return _r0
}

func (_expecter _IfaceWithBuildTagInFilename_Expecter) Sprintf(format match.Arg[string], a ...match.Arg[interface{}]) _IfaceWithBuildTagInFilename_Sprintf_Call {
	_args := append([]mock.Matcher{format.Arg}, match.ArgsToMatchers(a)...)
	return _IfaceWithBuildTagInFilename_Sprintf_Call{Call: _expecter.mock.ExpectCall("Sprintf", _args...)}
}

func (_call _IfaceWithBuildTagInFilename_Sprintf_Call) Return(_r0 string) _IfaceWithBuildTagInFilename_Sprintf_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _IfaceWithBuildTagInFilename_Sprintf_Call) RunReturn(f func(format string, a ...interface{}) string) _IfaceWithBuildTagInFilename_Sprintf_Call {
	_call.Call.RunReturn(f)
	return _call
}
