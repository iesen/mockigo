// Code generated by mockigo. DO NOT EDIT.

package mockery

import match "github.com/iesen/mockigo/match"
import mock "github.com/iesen/mockigo/mock"
import mockery "github.com/iesen/mockigo/internal/fixtures/mockery"

var _ = match.Any[int]

type KeyManager struct {
	mock *mock.Mock
}

func NewKeyManager(t mock.Testing) *KeyManager {
	t.Helper()
	return &KeyManager{mock: mock.NewMock(t)}
}

type _KeyManager_Expecter struct {
	mock *mock.Mock
}

func (_mock *KeyManager) EXPECT() _KeyManager_Expecter {
	return _KeyManager_Expecter{mock: _mock.mock}
}

type _KeyManager_GetKey_Call struct {
	*mock.Call
}

func (_mock *KeyManager) GetKey(_a0 string, _a1 uint16) ([]byte, *mockery.Err) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("GetKey", _a0, _a1)
	var _r0 []byte
	if _got := _results.Get(0); _got != nil {
		_r0 = _got.([]byte)
	}
	var _r1 *mockery.Err
	if _got := _results.Get(1); _got != nil {
		_r1 = _got.(*mockery.Err)
	}
	return _r0, _r1
}

func (_expecter _KeyManager_Expecter) GetKey(_a0 match.Arg[string], _a1 match.Arg[uint16]) _KeyManager_GetKey_Call {
	return _KeyManager_GetKey_Call{Call: _expecter.mock.ExpectCall("GetKey", _a0.Arg, _a1.Arg)}
}

func (_call _KeyManager_GetKey_Call) Return(_r0 []byte, _r1 *mockery.Err) _KeyManager_GetKey_Call {
	_call.Call.Return(_r0, _r1)
	return _call
}

func (_call _KeyManager_GetKey_Call) RunReturn(f func(string, uint16) ([]byte, *mockery.Err)) _KeyManager_GetKey_Call {
	_call.Call.RunReturn(f)
	return _call
}
