// Code generated by mockigo. DO NOT EDIT.

package mockery

import match "github.com/iesen/mockigo/match"
import mock "github.com/iesen/mockigo/mock"
import mockery_http "github.com/iesen/mockigo/internal/fixtures/mockery/http"
import net_http "net/http"

var _ = match.Any[int]

type HasConflictingNestedImports struct {
	mock *mock.Mock
}

func NewHasConflictingNestedImports(t mock.Testing) *HasConflictingNestedImports {
	t.Helper()
	return &HasConflictingNestedImports{mock: mock.NewMock(t)}
}

type _HasConflictingNestedImports_Expecter struct {
	mock *mock.Mock
}

func (_mock *HasConflictingNestedImports) EXPECT() _HasConflictingNestedImports_Expecter {
	return _HasConflictingNestedImports_Expecter{mock: _mock.mock}
}

type _HasConflictingNestedImports_Get_Call struct {
	*mock.Call
}

func (_mock *HasConflictingNestedImports) Get(path string) (net_http.Response, error) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Get", path)
	_r0 := _results.Get(0).(net_http.Response)
	_r1 := _results.Error(1)
	return _r0, _r1
}

func (_expecter _HasConflictingNestedImports_Expecter) Get(path match.Arg[string]) _HasConflictingNestedImports_Get_Call {
	return _HasConflictingNestedImports_Get_Call{Call: _expecter.mock.ExpectCall("Get", path.Arg)}
}

func (_call _HasConflictingNestedImports_Get_Call) Return(_r0 net_http.Response, _r1 error) _HasConflictingNestedImports_Get_Call {
	_call.Call.Return(_r0, _r1)
	return _call
}

func (_call _HasConflictingNestedImports_Get_Call) RunReturn(f func(path string) (net_http.Response, error)) _HasConflictingNestedImports_Get_Call {
	_call.Call.RunReturn(f)
	return _call
}

type _HasConflictingNestedImports_Z_Call struct {
	*mock.Call
}

func (_mock *HasConflictingNestedImports) Z() mockery_http.MyStruct {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Z")
	_r0 := _results.Get(0).(mockery_http.MyStruct)
	return _r0
}

func (_expecter _HasConflictingNestedImports_Expecter) Z() _HasConflictingNestedImports_Z_Call {
	return _HasConflictingNestedImports_Z_Call{Call: _expecter.mock.ExpectCall("Z")}
}

func (_call _HasConflictingNestedImports_Z_Call) Return(_r0 mockery_http.MyStruct) _HasConflictingNestedImports_Z_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _HasConflictingNestedImports_Z_Call) RunReturn(f func() mockery_http.MyStruct) _HasConflictingNestedImports_Z_Call {
	_call.Call.RunReturn(f)
	return _call
}
