// Code generated by mockigo. DO NOT EDIT.

package mockery

import match "github.com/iesen/mockigo/match"
import mock "github.com/iesen/mockigo/mock"

var _ = match.Any[int]

type Fooer struct {
	mock *mock.Mock
}

func NewFooer(t mock.Testing) *Fooer {
	t.Helper()
	return &Fooer{mock: mock.NewMock(t)}
}

type _Fooer_Expecter struct {
	mock *mock.Mock
}

func (_mock *Fooer) EXPECT() _Fooer_Expecter {
	return _Fooer_Expecter{mock: _mock.mock}
}

type _Fooer_Bar_Call struct {
	*mock.Call
}

func (_mock *Fooer) Bar(f func([]int)) {
	_mock.mock.T.Helper()
	_mock.mock.Called("Bar", f)
}

func (_expecter _Fooer_Expecter) Bar(f match.Arg[func([]int)]) _Fooer_Bar_Call {
	return _Fooer_Bar_Call{Call: _expecter.mock.ExpectCall("Bar", f.Arg)}
}

func (_call _Fooer_Bar_Call) Return() _Fooer_Bar_Call {
	_call.Call.Return()
	return _call
}

func (_call _Fooer_Bar_Call) RunReturn(f func(f func([]int))) _Fooer_Bar_Call {
	_call.Call.RunReturn(f)
	return _call
}

type _Fooer_Baz_Call struct {
	*mock.Call
}

func (_mock *Fooer) Baz(path string) func(x string) string {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Baz", path)
	var _r0 func(x string) string
	if _got := _results.Get(0); _got != nil {
		_r0 = _got.(func(x string) string)
	}
	return _r0
}

func (_expecter _Fooer_Expecter) Baz(path match.Arg[string]) _Fooer_Baz_Call {
	return _Fooer_Baz_Call{Call: _expecter.mock.ExpectCall("Baz", path.Arg)}
}

func (_call _Fooer_Baz_Call) Return(_r0 func(x string) string) _Fooer_Baz_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _Fooer_Baz_Call) RunReturn(f func(path string) func(x string) string) _Fooer_Baz_Call {
	_call.Call.RunReturn(f)
	return _call
}

type _Fooer_Foo_Call struct {
	*mock.Call
}

func (_mock *Fooer) Foo(f func(x string) string) error {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Foo", f)
	_r0 := _results.Error(0)
	return _r0
}

func (_expecter _Fooer_Expecter) Foo(f match.Arg[func(x string) string]) _Fooer_Foo_Call {
	return _Fooer_Foo_Call{Call: _expecter.mock.ExpectCall("Foo", f.Arg)}
}

func (_call _Fooer_Foo_Call) Return(_r0 error) _Fooer_Foo_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _Fooer_Foo_Call) RunReturn(f func(f func(x string) string) error) _Fooer_Foo_Call {
	_call.Call.RunReturn(f)
	return _call
}
