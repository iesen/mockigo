// Code generated by mockigo. DO NOT EDIT.

package mockery

import match "github.com/iesen/mockigo/match"
import mock "github.com/iesen/mockigo/mock"

var _ = match.Any[int]

type AsyncProducer struct {
	mock *mock.Mock
}

func NewAsyncProducer(t mock.Testing) *AsyncProducer {
	t.Helper()
	return &AsyncProducer{mock: mock.NewMock(t)}
}

type _AsyncProducer_Expecter struct {
	mock *mock.Mock
}

func (_mock *AsyncProducer) EXPECT() _AsyncProducer_Expecter {
	return _AsyncProducer_Expecter{mock: _mock.mock}
}

type _AsyncProducer_Input_Call struct {
	*mock.Call
}

func (_mock *AsyncProducer) Input() chan<- bool {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Input")
	var _r0 chan<- bool
	if _got := _results.Get(0); _got != nil {
		_r0 = _got.(chan<- bool)
	}
	return _r0
}

func (_expecter _AsyncProducer_Expecter) Input() _AsyncProducer_Input_Call {
	return _AsyncProducer_Input_Call{Call: _expecter.mock.ExpectCall("Input")}
}

func (_call _AsyncProducer_Input_Call) Return(_r0 chan<- bool) _AsyncProducer_Input_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _AsyncProducer_Input_Call) RunReturn(f func() chan<- bool) _AsyncProducer_Input_Call {
	_call.Call.RunReturn(f)
	return _call
}

type _AsyncProducer_Output_Call struct {
	*mock.Call
}

func (_mock *AsyncProducer) Output() <-chan bool {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Output")
	var _r0 <-chan bool
	if _got := _results.Get(0); _got != nil {
		_r0 = _got.(<-chan bool)
	}
	return _r0
}

func (_expecter _AsyncProducer_Expecter) Output() _AsyncProducer_Output_Call {
	return _AsyncProducer_Output_Call{Call: _expecter.mock.ExpectCall("Output")}
}

func (_call _AsyncProducer_Output_Call) Return(_r0 <-chan bool) _AsyncProducer_Output_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _AsyncProducer_Output_Call) RunReturn(f func() <-chan bool) _AsyncProducer_Output_Call {
	_call.Call.RunReturn(f)
	return _call
}

type _AsyncProducer_Whatever_Call struct {
	*mock.Call
}

func (_mock *AsyncProducer) Whatever() chan bool {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Whatever")
	var _r0 chan bool
	if _got := _results.Get(0); _got != nil {
		_r0 = _got.(chan bool)
	}
	return _r0
}

func (_expecter _AsyncProducer_Expecter) Whatever() _AsyncProducer_Whatever_Call {
	return _AsyncProducer_Whatever_Call{Call: _expecter.mock.ExpectCall("Whatever")}
}

func (_call _AsyncProducer_Whatever_Call) Return(_r0 chan bool) _AsyncProducer_Whatever_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _AsyncProducer_Whatever_Call) RunReturn(f func() chan bool) _AsyncProducer_Whatever_Call {
	_call.Call.RunReturn(f)
	return _call
}
