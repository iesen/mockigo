// Code generated by mockigo. DO NOT EDIT.

package mockery

import match "github.com/iesen/mockigo/match"
import mock "github.com/iesen/mockigo/mock"

var _ = match.Any[int]

type ConsulLock struct {
	mock *mock.Mock
}

func NewConsulLock(t mock.Testing) *ConsulLock {
	t.Helper()
	return &ConsulLock{mock: mock.NewMock(t)}
}

type _ConsulLock_Expecter struct {
	mock *mock.Mock
}

func (_mock *ConsulLock) EXPECT() _ConsulLock_Expecter {
	return _ConsulLock_Expecter{mock: _mock.mock}
}

type _ConsulLock_Lock_Call struct {
	*mock.Call
}

func (_mock *ConsulLock) Lock(_a0 <-chan struct{}) (<-chan struct{}, error) {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Lock", _a0)
	var _r0 <-chan struct{}
	if _got := _results.Get(0); _got != nil {
		_r0 = _got.(<-chan struct{})
	}
	_r1 := _results.Error(1)
	return _r0, _r1
}

func (_expecter _ConsulLock_Expecter) Lock(_a0 match.Arg[<-chan struct{}]) _ConsulLock_Lock_Call {
	return _ConsulLock_Lock_Call{Call: _expecter.mock.ExpectCall("Lock", _a0.Arg)}
}

func (_call _ConsulLock_Lock_Call) Return(_r0 <-chan struct{}, _r1 error) _ConsulLock_Lock_Call {
	_call.Call.Return(_r0, _r1)
	return _call
}

func (_call _ConsulLock_Lock_Call) RunReturn(f func(<-chan struct{}) (<-chan struct{}, error)) _ConsulLock_Lock_Call {
	_call.Call.RunReturn(f)
	return _call
}

type _ConsulLock_Unlock_Call struct {
	*mock.Call
}

func (_mock *ConsulLock) Unlock() error {
	_mock.mock.T.Helper()
	_results := _mock.mock.Called("Unlock")
	_r0 := _results.Error(0)
	return _r0
}

func (_expecter _ConsulLock_Expecter) Unlock() _ConsulLock_Unlock_Call {
	return _ConsulLock_Unlock_Call{Call: _expecter.mock.ExpectCall("Unlock")}
}

func (_call _ConsulLock_Unlock_Call) Return(_r0 error) _ConsulLock_Unlock_Call {
	_call.Call.Return(_r0)
	return _call
}

func (_call _ConsulLock_Unlock_Call) RunReturn(f func() error) _ConsulLock_Unlock_Call {
	_call.Call.RunReturn(f)
	return _call
}
