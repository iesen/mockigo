// Code generated by mockigo. DO NOT EDIT.

package data

import match "github.com/iesen/mockigo/match"
import mock "github.com/iesen/mockigo/mock"

var _ = match.Any[int]

type GenericInterface[T any] struct {
	mock *mock.Mock
}

func NewGenericInterface[T any](t mock.Testing) *GenericInterface[T] {
	t.Helper()
	return &GenericInterface[T]{mock: mock.NewMock(t)}
}

type _GenericInterface_Expecter[T any] struct {
	mock *mock.Mock
}

func (_mock *GenericInterface[T]) EXPECT() _GenericInterface_Expecter[T] {
	return _GenericInterface_Expecter[T]{mock: _mock.mock}
}

type _GenericInterface_Foo_Call[T any] struct {
	*mock.Call
}

func (_mock *GenericInterface[T]) Foo(a int, b ...T) T {
	_mock.mock.T.Helper()
	_args := []interface{}{a}
	for _, _variadic := range b {
		_args = append(_args, interface{}(_variadic))
	}
	_results := _mock.mock.Called("Foo", _args...)
	_r0 := _results.Get(0).(T)
	return _r0
}

func (_expecter _GenericInterface_Expecter[T]) Foo(a match.Arg[int], b ...match.Arg[T]) _GenericInterface_Foo_Call[T] {
	_args := append([]mock.Matcher{a.Arg}, match.ArgsToMatchers(b)...)
	return _GenericInterface_Foo_Call[T]{Call: _expecter.mock.ExpectCall("Foo", _args...)}
}

func (_call _GenericInterface_Foo_Call[T]) Return(_r0 T) _GenericInterface_Foo_Call[T] {
	_call.Call.Return(_r0)
	return _call
}

func (_call _GenericInterface_Foo_Call[T]) RunReturn(f func(a int, b ...T) T) _GenericInterface_Foo_Call[T] {
	_call.Call.RunReturn(f)
	return _call
}
